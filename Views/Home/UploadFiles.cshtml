
@{
    ViewBag.Title = "UploadFiles";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <link href="@Url.Content("~/Content/css/UploadFilesPage.css")" rel="stylesheet" />
    <style>
        .path-floating-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            overflow-y: auto;
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .path-floating-container-show {
            display: flex;
        }

        .path-floating-container-hide {
            display: none;
        }

        .bottom-layer {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .floating-body {
            position: relative;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            max-height: 600px;
            max-width: 500px;
            display: flex;
            background-color: #343a40;
            flex-direction: column;
            padding: 20px;
            color: white;
            border-radius: 10px;
            margin: 10px;
        }

        .folder-ele > .folder-name-ele {
            border: 1px solid #343a40;
            display: flex;
            justify-content: flex-start;
            align-items: center;
            padding: 5px;
            gap: 10px;
            border-radius: 5px;
            background-color: transparent;
            color: white;
        }

            .folder-ele > .folder-name-ele:hover {
                border: 1px solid white;
            }

        .folder-ele {
            margin: 10px;
        }

        .floating-body-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .close-button {
            background-color: transparent;
            border: none;
            color: white;
            cursor: pointer;
        }
    </style>
</head>

<h2>UploadFiles</h2>

<div class="container text-white mb-3 d-flex justify-content-between">
    <span id="show-upload-folder-path">Please Select Upload Path...</span>
    <button onclick="showPathFloatingContainer()" class="bg-primary btn text-white">Select Folder</button>
</div>

<div class="container">
    <div id="dropZone" style="border: 2px dashed #007bff; padding: 60px 10px 60px 10px; text-align: center; cursor: pointer;">
        <p class="m-0 text-white">Drag Files Here or Click To Select Files</p>
        <input type="file" id="fileInput" multiple style="display: none;" />
    </div>
    <br />
</div>
<br />

<div class="container file-info-container d-flex flex-row flex-wrap" style="gap: 20px">
    <form id="fileForm" class="form-container">
        <div id="fileList" class="p-5 rounded" style="border: 1px ridge var(--white-gray-color)">
            <div class="form-group">
                <label for="fileName" class="text-white">File Name</label>
                <input type="text" name="fileName" class="form-control input-form-b-b input-form-bg-transparent border-radius-0 border-color-w transparent-input-forcus text-white" placeholder="">
            </div>
            <br />
            <div class="form-group">
                <label for="fileDescription" class="text-white">File Description</label>
                <input type="text" name="fileDescription" class="form-control input-form-b-b input-form-bg-transparent border-radius-0 border-color-w transparent-input-forcus text-white" placeholder="">
            </div>
            <br />
            <div class="form-group">
                <label for="artist" class="text-white">Artist</label><br />
                <select name="artist" class="form-select select-transparent text-white" required>
                    @if (ViewBag.Artists != null && ViewBag.Artists.Count > 0)
                    {
                        foreach (LocalFileWebService.Models.Artist artist in ViewBag.Artists)
                        {
                            <option value="@artist.ArtistId" class="text-white">@artist.ArtistName</option>
                        }
                    }
                    <option value="@ViewBag.DefaultArtist" class="text-white" selected>Default</option>
                </select>
            </div>
            <br />
            <div class="form-group">
                <label for="tags" class="text-white">Tag (multiple)</label>
                @if (ViewBag.Tags != null && ViewBag.Tags.Count > 0)
                {
                    <select multiple name="tags" class="form-select select-transparent custom-scroll">
                        @foreach (LocalFileWebService.Models.Tag tag in ViewBag.Tags)
                        {
                            <option value="@tag.TagId" class="text-white">@tag.TagName</option>
                        }
                    </select>
                }
                else
                {
                    <select multiple name="tags" class="disabled form-select select-transparent custom-scroll" disabled>
                        <option value="" class="text-dark">No Tag Found</option>
                    </select>
                }
            </div>
            <br />
            <input type="submit" id="submitForm" class="btn btn-primary" value="Save Info This File" />
        </div>
    </form>
    <div class="view-list-files-container text-white container p-0">
        <ul class="m-0 custom-ul p-0" id="file-list-ul">
        </ul>
    </div>
</div>

<div class="container pt-3">
    <button id="uploadButton" class="btn btn-primary w-100" data-toggle="modal" data-target="#uploadFileModal">Upload</button>
</div>

@helper RenderFolderTree(List<LocalFileWebService.Models.Folder> folders, LocalFileWebService.Models.Folder folder, string prevFolder, int level = 0)
{
    List<LocalFileWebService.Models.Folder> childFolders = folders
    .Where(f => f.FolderParentId == folder.FolderId)
    .ToList();

    if (childFolders.Any())
    {
        <ul class="text-white" style="margin-left: @(String.Concat((level * 5).ToString(), "px"));">
            @{ string uploadSelectedPath = ""; }
            @if (level > 0)
            {
                uploadSelectedPath += $"{prevFolder}";
                <!-- Thêm thụt lề -->
                foreach (LocalFileWebService.Models.Folder child in childFolders)
                {
                    <li class="folder-ele">
                        <button class="folder-name-ele" onclick="onClickSelectFolder('@($"{uploadSelectedPath}/{child.FolderName}")')">
                            <i class='bx bx-folder nav_icon'></i>
                            @child.FolderName
                        </button> <!-- Hiển thị tên thư mục hiện tại -->
                        @RenderFolderTree(folders, child, $"{uploadSelectedPath}/{child.FolderName}", level + 1) <!-- Gọi đệ quy -->
                    </li>
                }
            }
            else
            {
                uploadSelectedPath = $"{prevFolder}";
                <li class="folder-ele">
                    <button class="folder-name-ele" onclick="onClickSelectFolder('@($"{uploadSelectedPath}/{folder.FolderName}")')">
                        <i class='bx bx-folder nav_icon'></i>
                        @folder.FolderName
                    </button> <!-- Hiển thị tên thư mục hiện tại -->
                    @RenderFolderTree(folders, folder, $"{uploadSelectedPath}/{folder.FolderName}", level + 1) <!-- Gọi đệ quy -->
                </li>
            }
        </ul>
    }
}

<div class="path-floating-container path-floating-container-hide" id="path-floating-container">
    <div class="bottom-layer"></div>
    <div class="floating-body">
        <div class="floating-body-title">
            <h5 class="card-title">Select Folder</h5>
            <button class="close-button" onclick="hidePathFloatingContainer()">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="white" class="bi bi-x" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                </svg>
            </button>
        </div>
        <hr />
        @if (ViewBag.Folders != null)
        {
            @RenderFolderTree(ViewBag.Folders, ViewBag.RootFolder, "", 0)
        }
    </div>
</div>


@* select folder scriot *@
<script>
    function showPathFloatingContainer() {
        document.getElementById("path-floating-container").classList.remove("path-floating-container-hide");
        document.getElementById("path-floating-container").classList.add("path-floating-container-show");
    }

    function hidePathFloatingContainer() {
        document.getElementById("path-floating-container").classList.remove("path-floating-container-show");
        document.getElementById("path-floating-container").classList.add("path-floating-container-hide");
    }

    document.querySelector(".bottom-layer").addEventListener("click", () => hidePathFloatingContainer());

    function onClickSelectFolder(path) {
        document.getElementById("show-upload-folder-path").innerText = path;
        hidePathFloatingContainer();
    }
</script>

@* upload file script *@
<script>
    const fileDropZone = document.getElementById('dropZone');
    const fileInputElement = document.getElementById('fileInput');
    const fileUploadList = document.getElementById('file-list-ul');

    // Danh sách tệp và thông tin tệp
    let uploadedFiles = [];
    let uploadedFilesInfo = [];
    let currentFileIndex = 0;

    // Khu vực Drop Zone
    fileDropZone.addEventListener('click', () => fileInputElement.click());

    fileDropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        fileDropZone.style.borderColor = "#00b300";
    });

    fileDropZone.addEventListener('dragleave', () => {
        fileDropZone.style.borderColor = "#007bff";
    });

    fileDropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        fileDropZone.style.borderColor = "#007bff";

        const files = Array.from(e.dataTransfer.files);
        handleUploadedFiles(files);
    });

    fileInputElement.addEventListener('change', (e) => {
        const files = Array.from(e.target.files);
        handleUploadedFiles(files);
    });

    // Xử lý tệp được tải lên
    function handleUploadedFiles(files) {
        files.forEach((file) => {
            if (uploadedFiles.some(f => f.name === file.name)) {
                alert(`File ${file.name} đã được thêm.`);
                return;
            }

            // Thêm tệp vào danh sách
            uploadedFiles.push(file);

            // Thêm thông tin tệp mặc định
            uploadedFilesInfo.push({
                fileName: file.name,
                fileDescription: "",
                artist: @ViewBag.DefaultArtist,
                tags: []
            });
        });

        renderFileList();
    }

    // Hiển thị danh sách tệp
    function renderFileList() {
        fileUploadList.innerHTML = uploadedFiles.map((file, idx) => `
        <li onclick="ediFileInfo(${idx})">
            <p class="one-line-text p-0 m-0">${file.name}</p>
            <span class="material-icons" onclick="removeFile(${idx}, event)">delete</span>
        </li>
    `).join('');

        if (uploadedFiles.length > 0) {
            ediFileInfo(0);
        }
    }

    // Chỉnh sửa thông tin tệp
    function ediFileInfo(idx) {
        const file = uploadedFilesInfo[idx];
        const form = document.getElementById("fileForm");

        form.elements["fileName"].value = file.fileName;
        form.elements["fileDescription"].value = file.fileDescription;
        form.elements["artist"].value = file.artist;
        form.elements["tags"].value = file.tags;

        currentFileIndex = idx;
    }

    // Cập nhật thông tin tệp khi chỉnh sửa
    document.getElementById("fileForm").addEventListener("submit", (e) => {
        e.preventDefault();

        const form = document.getElementById("fileForm");
        uploadedFilesInfo[currentFileIndex] = {
            fileName: form.elements["fileName"].value,
            fileDescription: form.elements["fileDescription"].value,
            artist: form.elements["artist"].value,
            tags: Array.from(form.elements["tags"].selectedOptions).map(option => option.value)
        };

        console.log(uploadedFilesInfo);
    });

    // Xóa tệp khỏi danh sách
    function removeFile(idx, event) {
        event.stopPropagation();
        uploadedFiles.splice(idx, 1);
        uploadedFilesInfo.splice(idx, 1);
        renderFileList();
    }

    // Upload tệp và thông tin lên server
    document.getElementById('uploadButton').addEventListener('click', () => {
        const formData = new FormData();

        // Thêm danh sách tệp
        uploadedFiles.forEach((file, idx) => {
            formData.append('files', file);
        });

        // Thêm thông tin tệp
        formData.append('filesInfo', JSON.stringify(uploadedFilesInfo));

        // Thêm đường dẫn
        let path = document.getElementById('show-upload-folder-path').innerText;
        if (path === "Please Select Upload Path...") {
            alert('Vui lòng chọn đường dẫn upload!');
            return;
        }
        path = path.substring(6);
        formData.append("path", path);

        //console.log(formData);

        fetch('/Home/_UploadFiles', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                console.log('Full Response:', response);
                return response.text(); // Parse as text to inspect the raw response
            })
            .then(data => {
                try {
                    const jsonData = JSON.parse(data); // Attempt to parse as JSON
                    console.log('Parsed JSON:', jsonData);

                    if (jsonData.success) {
                        alert('Upload thành công!');
                        window.location.reload();
                    } else {
                        alert('Upload thất bại! Vui lòng thử lại.');
                    }
                } catch (error) {
                    console.error('Failed to parse JSON. Response was:', data);
                    document.getElementById('error').innerText = data;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Upload thất bại! Vui lòng thử lại.');
            });

    });
</script>