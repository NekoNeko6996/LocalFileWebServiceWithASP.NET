@using LocalFileWebService.Models
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var folder_path = Request.QueryString["p"];
    var folders = ViewBag.Folders as List<Folder> ?? new List<Folder>();
    var sources = ViewBag.sources as List<Source> ?? new List<Source>();
}

<style>
    .view-video-btn {
        cursor: pointer;
    }

    .file-display-name {
        white-space: nowrap; /* Ngăn xuống dòng */
        overflow: hidden; /* Ẩn nội dung thừa */
        text-overflow: ellipsis; /* Hiển thị dấu ba chấm cho nội dung bị cắt */
        margin: 5px 0 5px 0;
        text-align: left;
    }

    .folder-name:active {
        color: white;
    }

    .folder-name:hover {
        color: white;
        text-decoration: none !important;
    }

    .create-new-folder-container {
        width: 100%;
        max-width: 550px;
        height: 100%;
        max-height: 190px;
        background-color: #202427;
        border-radius: 10px 10px 0 0;
        padding: 20px;
        color: white;
    }

    #contextMenu ul {
        padding: 5px;
        background-color: #f9f9f9;
    }

        #contextMenu ul li {
            padding: 8px 12px;
        }

            #contextMenu ul li a {
                text-decoration: none;
                color: black;
            }

            #contextMenu ul li:hover {
                background-color: #e8e8e8;
            }
</style>

<div class="position-relative d-block p-3 rounded" style="background-color: var(--white-gray-color)">
    <h6 class="title rounded directory-show text-white m-0">
        <a href="/Home/Index" class="text-decoration-none text-white">Root</a>
        @{
            if (!string.IsNullOrEmpty(folder_path))
            {
                string[] folder_path_list = folder_path.Split('/');
                var path = "";
                for (int idx = 0; idx < folder_path_list.Length; idx++)
                {
                    if (idx == 0)
                    {
                        path = folder_path_list[idx];
                    }
                    else
                    {
                        path += $"/{folder_path_list[idx]}";
                    }
                    <span>
                        > <a href="/Home/Index?p=@path" class="text-decoration-none text-white">@folder_path_list[idx]</a>
                    </span>
                }
            }
        }
    </h6>
</div>

@if (folders.Count > 0)
{
    <h4 class="title text-white mt-2">Folders</h4>
    <div class="d-flex flex-row flex-wrap foder-show-body" style="margin-top: 2rem; margin-bottom: 2rem; gap: 10px;">
        @foreach (var folder in folders)
        {
            <a href="?p=@(string.IsNullOrEmpty(folder_path) ? folder.FolderName : $"{folder_path}/{folder.FolderName}")" class="context-menu-target" data-item-id="folder-@folder.FolderName-@folder.FolderId">
                <div class="d-flex flex-row p-2 flex-grow-0 align-items-center folder-container rounded border" style="width: 13rem; gap: 10px">
                    @if (string.IsNullOrEmpty(folder.FolderIconUrl))
                    {
                        <svg width="30px" height="30px" viewBox="0 0 1024 1024" class="icon" version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M810.665 269.333v-24.889c0-27.467-22.288-49.777-49.777-49.777H437.333v-24.89c0-27.467-22.288-49.777-49.779-49.777H263.11c-27.489 0-49.777 22.31-49.777 49.777v99.556h597.332z" fill="#2577FF" /><path d="M885.332 269.333H399.999V232c0-41.203-33.431-74.667-74.667-74.667H138.667C97.431 157.333 64 190.798 64 232v597.333C64 870.6 97.431 904 138.667 904h746.665c41.235 0 74.666-33.4 74.666-74.667V344c0-41.202-33.431-74.667-74.666-74.667z" fill="#FCB814" /><path d="M344 209.224v60.109h55.528c10.588-82.956-28.514-102.28-62.733-110.843A181.619 181.619 0 0 1 344 209.224zM896.794 270.491C901.296 280.096 904 290.7 904 302v485.334C904 828.6 870.566 862 829.332 862H82.665c-3.93 0-7.71-0.571-11.477-1.156C83.092 886.282 108.73 904 138.665 904h746.667C926.566 904 960 870.6 960 829.333V344c0-37.278-27.454-67.953-63.206-73.509z" fill="" /></svg>
                    }
                    else
                    {
                        <img src="/Home/GetFile/3" class="nav_icon folder-icon" alt="icon">
                    }
                    <h6 class="folder-name text-light m-0">@folder.FolderName</h6>
                </div>
            </a>
        }

    </div>
    <hr style="border-top: 1px solid var(--white-gray-color); " />
}
else
{
    <br />
}

<div class="d-flex flex-row justify-content-between">
    <h4 class="title text-white">Files</h4>
    <div class="">
        <label class="switch text-white" for="my-checkbox">Auto Play</label>
        <input type="checkbox" name="auto-play-checkbox" id="auto-play-checkbox">
    </div>
</div>
<div class="d-flex flex-row flex-wrap" id="card-container" style="margin-top: 2rem; margin-bottom: 2rem; gap: 10px;">
    @if (sources.Count > 0)
    {
        foreach (var source in sources)
        {

            <div class="card bg-dark border-0 context-menu-target" data-item-id="source-@source.SourceName-@source.SourceId">
                @if (source.SourceType.Contains("image"))
                {
                    <button class="show-img-thumbnail-container rounded border-0 p-0" onclick="onClickViewImg('/Home/GetFile/@(source.SourceId)')">
                        <img src="/Home/GetFile/@source.SourceId" class="card-img-top show-img-thumbnail" alt="...">
                    </button>
                }
                else if (source.SourceType.Contains("video"))
                {
                    <button class="mb-0 p-0 border-0 rounded view-video-btn" style="background-color: #343a40; width: 18rem;" onclick="onClickOpenViewVideo('/Home/GetFile/@source.SourceId', '@source.SourceName')">
                        <img src="/Home/GetVideoFileThumbnail/@source.SourceId" class="rounded card-img-top" alt="thumb">
                        <p class="text-white bg-dark m-0 position-absolute" style="font-size:.8rem; padding: 0 5px 0 5px; top: 5px; right: 5px;">@TimeSpan.FromSeconds(source.SourceLength).ToString(@"hh\:mm\:ss")</p>
                    </button>
                    <div class="d-flex flex-row align-items-center justify-content-between">
                        <p href="/Home/GetFile/@source.SourceId" class="file-display-name text-white flex-grow-1" style="font-size: .8rem; text-decoration: none;">@source.SourceName</p>

                    </div>

                }
                else
                {
                    <div class="unsupported-file">
                        <svg ...></svg>
                        <p class="text-muted">Unsupported file type</p>
                    </div>
                }
            </div>

        }
    }
    else
    {
        <div class="d-flex align-items-center flex-column" style="width: 100%">
            <img src="~/Content/Image/empty-folder.png" alt="Folder Empty" style="width:13rem; aspect-ratio:1/1;" />
            <h6 class="text-muted">Folder Is Empty ...</h6>
        </div>
    }
</div>

<div class="floating-container-layer justify-content-center align-items-center container-display-hidden" id="create-new-folder-container">
    <div class="create-new-folder-container rounded border">
        <form action="/Home/CreateFolder" method="post" class="">
            <label for="folder-name" class="col-form-label"><strong>Folder Name</strong></label>
            <input type="text" name="folder-name" id="folder-name" class="form-control" required>
            <input type="hidden" name="folder-path" value="@folder_path">
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Create Folder</button>
            </div>
        </form>
    </div>
</div>

@*floating add button*@
<div class="fab-container">
    <div class="fab shadow">
        <div class="fab-content">
            <span class="material-icons">list</span>
        </div>
    </div>
    <div class="sub-button shadow">
        <button type="button" class="btn btn-primary rounded" onclick="showCreateFolderContainer()">
            <span class="material-icons">folder</span>
        </button>
    </div>
    <div class="sub-button shadow">
        @*<button type="button" class="btn btn-primary rounded" data-toggle="modal" data-target="#uploadFileModal">
                <span class="material-icons">upload</span>
            </button>*@

        <a href="/Home/UploadFiles" class="btn btn-primary rounded">
            <span class="material-icons">upload</span>
        </a>
    </div>
</div>

<div id="contextMenu" class="rounded" style="display:none; position:absolute; z-index:1000; background:white; border:1px solid #ccc;">
    <ul style="list-style:none; margin:0; padding:0;">
        <li><a href="#" id="actionOption1" class="d-flex row align-items-center m-1" style="gap: 5px;"><span class="material-icons">delete</span> Delete</a></li>
        <li><a href="#" id="actionOption2" class="d-flex row align-items-center m-1" style="gap: 5px;"><span class="material-icons">info</span> Properties</a></li>
    </ul>
</div>

@*// show create folder *@
<script>
    function showCreateFolderContainer() {
        const folderContainer = document.querySelector("#create-new-folder-container");
        folderContainer.classList.remove("container-display-hidden");
        folderContainer.classList.add("container-display-show");
    }

    const folderContainer = document.querySelector("#create-new-folder-container");
    folderContainer.addEventListener("click", (e) => {
        if (!e.target.closest(".create-new-folder-container")) {
            folderContainer.classList.remove("container-display-show");
            folderContainer.classList.add("container-display-hidden");
        }
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const contextMenu = document.getElementById("contextMenu");
        let currentElementId = null;

        // Gắn sự kiện contextmenu (chuột phải) cho tất cả các phần tử có class 'context-menu-target'
        document.querySelectorAll(".context-menu-target").forEach(element => {
            element.addEventListener("contextmenu", function (event) {
                event.preventDefault();

                // Lưu ID hoặc thông tin phần tử được nhấp
                currentElementId = this.getAttribute("data-item-id");

                // Hiển thị menu tại vị trí con trỏ
                contextMenu.style.display = "block";
                contextMenu.style.left = event.pageX + "px";
                contextMenu.style.top = event.pageY - 60 + "px";
            });
        });

        // Ẩn menu khi nhấp chuột bên ngoài
        document.addEventListener("click", function (event) {
            if (event.target.closest("#contextMenu") == null) {
                contextMenu.style.display = "none";
            }
        });

        // Xử lý các hành động trong menu
        document.getElementById("actionOption1").addEventListener("click", function () {
            const [type_, name_, id_] = currentElementId.split("-");
            deleteFolder(id_, name_, type_);
        });

        document.getElementById("actionOption2").addEventListener("click", function () {
            alert(`Option 2 selected for item ${currentElementId}`);
            contextMenu.style.display = "none";
        });
    });

    function deleteFolder(id_, name_, type_) {
        if (confirm(`Are you sure you want to delete [${name_}]?`)) {
            $.post("/Home/DeleteFolder", { id: id_, name: name_, type: type_ })
                .done(function (response) {
                    if (response.success) {
                        alert(response.message);
                    } else {
                        alert("Error: " + response.message);
                    }
                })
                .fail(function () {
                    alert("Request failed!");
                });
        }
    }
</script>
